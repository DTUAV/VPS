/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace predictor_msgs
{
    public sealed class PredictorMsgs : LCM.LCM.LCMEncodable
    {
        public int n;
        public float currentPositionX;
        public float currentPositionY;
        public float currentPositionZ;
        public float[] predictedTimes;
        public float[] predictedStatesX;
        public float[] predictedStatesY;
        public float[] predictedStatesZ;
 
        public PredictorMsgs()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x07a7c29baf30bf80L;
 
        static PredictorMsgs()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("predictor_msgs.PredictorMsgs"))
                return 0L;
 
            classes.Add("predictor_msgs.PredictorMsgs");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.n); 
 
            outs.Write(this.currentPositionX); 
 
            outs.Write(this.currentPositionY); 
 
            outs.Write(this.currentPositionZ); 
 
            for (int a = 0; a < this.n; a++) {
                outs.Write(this.predictedTimes[a]); 
            }
 
            for (int a = 0; a < this.n; a++) {
                outs.Write(this.predictedStatesX[a]); 
            }
 
            for (int a = 0; a < this.n; a++) {
                outs.Write(this.predictedStatesY[a]); 
            }
 
            for (int a = 0; a < this.n; a++) {
                outs.Write(this.predictedStatesZ[a]); 
            }
 
        }
 
        public PredictorMsgs(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public PredictorMsgs(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static predictor_msgs.PredictorMsgs _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            predictor_msgs.PredictorMsgs o = new predictor_msgs.PredictorMsgs();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.n = ins.ReadInt32();
 
            this.currentPositionX = ins.ReadSingle();
 
            this.currentPositionY = ins.ReadSingle();
 
            this.currentPositionZ = ins.ReadSingle();
 
            this.predictedTimes = new float[(int) n];
            for (int a = 0; a < this.n; a++) {
                this.predictedTimes[a] = ins.ReadSingle();
            }
 
            this.predictedStatesX = new float[(int) n];
            for (int a = 0; a < this.n; a++) {
                this.predictedStatesX[a] = ins.ReadSingle();
            }
 
            this.predictedStatesY = new float[(int) n];
            for (int a = 0; a < this.n; a++) {
                this.predictedStatesY[a] = ins.ReadSingle();
            }
 
            this.predictedStatesZ = new float[(int) n];
            for (int a = 0; a < this.n; a++) {
                this.predictedStatesZ[a] = ins.ReadSingle();
            }
 
        }
 
        public predictor_msgs.PredictorMsgs Copy()
        {
            predictor_msgs.PredictorMsgs outobj = new predictor_msgs.PredictorMsgs();
            outobj.n = this.n;
 
            outobj.currentPositionX = this.currentPositionX;
 
            outobj.currentPositionY = this.currentPositionY;
 
            outobj.currentPositionZ = this.currentPositionZ;
 
            outobj.predictedTimes = new float[(int) n];
            for (int a = 0; a < this.n; a++) {
                outobj.predictedTimes[a] = this.predictedTimes[a];
            }
 
            outobj.predictedStatesX = new float[(int) n];
            for (int a = 0; a < this.n; a++) {
                outobj.predictedStatesX[a] = this.predictedStatesX[a];
            }
 
            outobj.predictedStatesY = new float[(int) n];
            for (int a = 0; a < this.n; a++) {
                outobj.predictedStatesY[a] = this.predictedStatesY[a];
            }
 
            outobj.predictedStatesZ = new float[(int) n];
            for (int a = 0; a < this.n; a++) {
                outobj.predictedStatesZ[a] = this.predictedStatesZ[a];
            }
 
            return outobj;
        }
    }
}

